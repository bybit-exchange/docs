import { Config } from './config';
import type { Api, DeprecatedInRawConfig, FlatRawConfig, Plugin, RawConfig, RawResolveConfig, ResolveConfig, ResolvedStyleguideConfig, RulesFields } from './types';
export declare function parsePresetName(presetName: string): {
    pluginId: string;
    configName: string;
};
export declare function transformApiDefinitionsToApis(apiDefinitions?: DeprecatedInRawConfig['apiDefinitions']): Record<string, Api> | undefined;
export declare function prefixRules<T extends Record<string, any>>(rules: T, prefix: string): any;
export declare function mergeExtends(rulesConfList: ResolvedStyleguideConfig[]): Omit<ResolvedStyleguideConfig, RulesFields> & Required<Pick<ResolvedStyleguideConfig, RulesFields>>;
export declare function getMergedConfig(config: Config, apiName?: string): Config;
export declare function transformConfig(rawConfig: DeprecatedInRawConfig & RawConfig & FlatRawConfig): RawConfig;
export declare function getResolveConfig(resolve?: RawResolveConfig): ResolveConfig;
export declare function getUniquePlugins(plugins: Plugin[]): Plugin[];
